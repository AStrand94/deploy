name: NAIS deploy release pipeline

on: [push]

env:
  image: docker.pkg.github.com/${{ github.repository }}/deploy
  dockerhub_image: navikt/deployment

jobs:

  build:
    name: Build Docker container
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Generate version tags
      run: |
        echo ::set-env name=version::$(./version.sh)
        echo ::set-env name=deploy_action_api_version::$(cat actions/deploy/version)
    - name: Build Docker image
      run: |
        docker build --tag ${image}:${version} --tag ${image}:latest --tag ${image}:${deploy_action_api_version} .
    - name: Push Docker image to GitHub
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
        docker push ${image}:${version}
        docker push ${image}:${deploy_action_api_version}
        docker push ${image}:latest
    - name: Push Docker image to Dockerhub
      if: github.ref == 'refs/heads/master'
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
        docker tag ${image}:latest ${dockerhub_image}:${deploy_action_api_version}
        docker push ${dockerhub_image}:${deploy_action_api_version}

  release:
    name: Release versioned GitHub Action
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Force create tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git tag -f $(cat actions/deploy/version)
        git push -f --tags
    - name: Create deploy binaries
      run: |
        make deploy-release-linux
        make deploy-release-darwin
        make deploy-release-windows
    - name: Delete release if exists
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        latest=$(curl https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest)
        tag=$(echo $latest | jq .tag_name)
        if grep -q "$tag" actions/deploy/version; then
          release_id=$(echo $latest | jq .id)
          curl -X DELETE https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/releases/$(release_id)
        fi
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release=$(curl -X POST \
          -d '{"tag_name": "'"$(cat actions/deploy/version)"'"}' \
          -H "Content-Type: application/json" \
          https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/releases)
        echo ::set-output name=upload_url::$(echo $release | jq .upload_url)
    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./deploy-linux
        asset_name: deploy-linux
        asset_content_type: application/x-binary
    - name: Upload Darwin Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./deploy-darwin
        asset_name: deploy-darwin
        asset_content_type: application/x-binary
    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./deploy-windows
        asset_name: deploy-windows
        asset_content_type: application/x-binary

  deploy:
    name: Deploy to Kubernetes
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Generate image environment variable
      run: |
        version=$(./version.sh)
        echo ::set-env name=version::${version}
        echo ::set-env name=IMAGE::${image}:${version}
        echo ::set-env name=NAIS_YAML::${GITHUB_WORKSPACE}/nais-yaml
        pwd
    - name: Bump version in nais-yaml
      env:
        DEPLOY_KEY: ${{ secrets.NAIS_YAML_DEPLOY_KEY }}
        GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
      run: |
        eval "$(ssh-agent -s)"
        ssh-add - <<< "${DEPLOY_KEY}"
        mkdir -p $NAIS_YAML
        git clone git@github.com:navikt/nais-yaml.git $NAIS_YAML
        cd $NAIS_YAML
        git config user.email "aura@nav.no"
        git config user.name "NAIS deploy pipeline"
        sed -E -i "s#image: .+#image: ${IMAGE}#" vars/deployment.yaml
        git add .
        git --no-pager diff --cached
        git commit -a -m "Bump deployment orchestrator to version ${version}"
        git push
